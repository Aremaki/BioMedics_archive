[tool.edsnlp]
# Suggestion: choose a name that mixes both the architecture (eds-medic) and the
# dataset on which the model was trained (aphp)
# This field will be read by script/package.py
model_name = "eds-medic-cse200093"

[tool.poetry]
name = "biomedics"
version = "0.1.0"
description = "Extracting and normalizing laboratory test mentions and drug mentions from raw clinical note"
authors = ["Aremaki <ad.remaki@gmail.com>"]
license = "BSD 3-Clause License"
readme = "README.md"

[tool.poetry.dependencies]
# /!\ Do not hesitate to adjust python's version to fit your training and deployment environments
python = ">3.7.6,<3.8.0"
edsnlp = { version = ">=0.10.6", extras = ["ml"] }
sentencepiece = "^0.1.96"
altair = "^5.0"
fsspec = "2022.7.1"
unidecode = "^1.3.8"
thinc = "8.2.3"
pathspec = "0.9.0"
omegaconf = "^2.3.0"
duckdb = "^1.0.0"

[tool.poetry.group.dev.dependencies]
dvc = { version = "^2.37.0", markers = "python_version >= '3.8'" }
loguru = "^0.6.0"
typer = "^0.6.1"
pandas = [
    { version = ">=1.1.0,<2.0.0", markers = "python_version < '3.8'" },
    { version = ">=1.4.0,<2.0.0", markers = "python_version >= '3.8'" }
]
pyarrow = "^7.0.0"
fsspec = "^2022.3.0"
black = "22.6.0"
flake8 = ">=3.0"
pre-commit = "^2.18.1"
pytest = "^7.1.1"
pytest-cov = "^3.0.0"
mypy = "^0.950"
coverage = "^6.5.0"
toml = "^0.10.2"
wheel = "^0.40.0"
accelerate = { version = "^0.21.0", markers = "python_version >= '3.8'" }
rich-logger = "^0.3.0"
scipy = [
    { version = "*", markers = "python_version >= '3.8'" },
    { version = "*", markers = "python_version < '3.8'" }
]
torch = [
    { version = "<2.1", markers = "python_version >= '3.8'" },
    { version = "<2.1", markers = "python_version < '3.8'" }
]

[tool.poetry.group.spark]
optional = true

[tool.poetry.group.spark.dependencies]
pyspark = "2.4.3"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 10
exclude = ["docs", "build", "tests"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.pytest.ini_options]
testpaths = [
    "tests",
]

[tool.mypy]
plugins = "pydantic.mypy"

[tool.ruff]
fix = true
extend-exclude = [
    ".git",
    "__pycache__",
    "__init__.py",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "build",
]
line-length = 88
select = [
    "E",
    "F",
    "W",
    "I001"
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.extend-per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["eds_medic"]
order-by-type = true

[tool.coverage.report]
include = [
    "eds_medic/*",
    "scripts/*",
]
omit = [
    "tests/*",
]
exclude_lines = [
    "def __repr__",
    "if __name__ == .__main__.:",
    "@overload",
    "pragma: no cover",
    "raise .*Error",
    "raise .*Exception",
    "warn\\(",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "Span.set_extension.*",
    "Doc.set_extension.*",
    "Token.set_extension.*",
]

[build-system]
requires = ["poetry-core>=1.0.0", "pypandoc<1.8.0"]
build-backend = "poetry.core.masonry.api"
